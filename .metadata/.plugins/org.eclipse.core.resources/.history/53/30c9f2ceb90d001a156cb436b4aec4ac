package me.brook.PokemonCreator.input.tool;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

import me.brook.PokemonCreator.PokemonCreator;
import me.brook.PokemonCreator.input.InputHandler;
import me.brook.PokemonCreator.world.area.PokeArea;
import me.brook.PokemonCreator.world.tile.Tile;

public class FillAreaTool extends SelectAreaPaintTool {

	// If should fill, add tiles. If not, then remove them.
	private boolean shouldFill;

	public FillAreaTool(PokemonCreator creator) {
		super(creator);
	}

	@Override
	public void draw(Graphics g) {
		g.setColor(Color.RED);
		if(mouseStart != null && mouseEnd != null) {
			Point start = new Point(), end = new Point();

			if(mouseStart.x < mouseEnd.x) {
				start.x = mouseStart.x;
				end.x = mouseEnd.x;
			}
			else {
				start.x = mouseEnd.x;
				end.x = mouseStart.x;
			}

			if(mouseStart.y < mouseEnd.y) {
				start.y = mouseStart.y;
				end.y = mouseEnd.y;
			}
			else {
				start.y = mouseEnd.y;
				end.y = mouseStart.y;
			}
			// Buffer to render full tile
			end.x++;
			end.y++;

			int x1 = (start.x + drawer.getxOffset()) * drawer.getTileSize();
			int y1 = (start.y + drawer.getyOffset()) * drawer.getTileSize();

			int x2 = (end.x + drawer.getxOffset()) * drawer.getTileSize();
			int y2 = (end.y + drawer.getyOffset()) * drawer.getTileSize();

			g.setColor(Color.RED);
			g.drawRect(x1, y1, x2 - x1, y2 - y1);
		}
	}

	@Override
	public void handleInput(InputHandler input) {
		super.handleInput(input);

		Point mouse = drawer.getMousePosition();

		if(mouse == null) {
			return;
		}

		if(maker.getCurrentArea() == null) {
			return;
		}

		if(input.getMousePressed()[clickType]) {
			mouseEnd = drawer.getTileLocationAt(mouse);
		}
		else {

			List<Point> points = new ArrayList<>();
			for(int x = mouseStart.x; x < mouseEnd.x; x++) {
				for(int y = mouseStart.y; y < mouseEnd.y; y++) {

				}
			}

			mouseStart = null;
			mouseEnd = null;
		}

	}

	private void fillTiles(List<Point> points) {

		PokeArea area = maker.getCurrentArea();
		for(Point p : points) {
			Tile tile = new Tile(p.x, p.y, maker.getCurrentTileData());
			area.add(tile);
		}
	}

	private void removeTiles(List<Point> points) {

		PokeArea area = maker.getCurrentArea();
		for(Point p : points) {
			for(Tile t : area.getTilesAt(p)) {
				area.remove(t);
			}
		}
	}

}
