package me.brook.PokemonCreator.input;

import java.awt.Component;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;

public class InputHandler {

	public Point mouse;

	// Pressed is if it is currently held down
	// Clicked is if it has been clicked since last tick
	private boolean[] mousePressed, mouseClicked;
	private int mouseWheel = 0;
	private boolean[] isKeyPressed;
	
	private boolean hasMouseMovedSincePressed = false;
	private Point startClickPoint;
	
	public InputHandler(Component component) {
		
		MouseInput mouse = new MouseInput();
		component.addKeyListener(new KeyInput());
		component.addMouseListener(mouse);
		component.addMouseWheelListener(mouse);
		
		isKeyPressed = new boolean[1000];
		mousePressed = new boolean[10];
		mouseClicked = new boolean[10];
	}
	
	public void update() {
		mouseWheel = 0;
		
		for(int i = 0; i < mouseClicked.length; i++) {
			mouseClicked[i] = false;
		}
	}
	
	public class MouseInput extends MouseAdapter {
		
		@Override
		public void mouseMoved(MouseEvent e) {
			mouse = e.getPoint();
			
			if(mouse.distance(startClickPoint) > 5) {
				hasMouseMovedSincePressed = true;
			}
		}
		
		@Override
		public void mouseWheelMoved(MouseWheelEvent e) {
			mouseWheel = e.getUnitsToScroll();
		}
		
		@Override
		public void mouseClicked(MouseEvent e) {
			mouseClicked[e.getButton()] = true;
		}

		@Override
		public void mousePressed(MouseEvent e) {
			System.out.println(e.getButton());
			mousePressed[e.getButton()] = true;
			startClickPoint = e.getPoint();
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			mousePressed[e.getButton()] = false;
			startClickPoint = null;
		}
		
	}

	public class KeyInput implements KeyListener {

		@Override
		public void keyPressed(KeyEvent e) {
			isKeyPressed[e.getKeyCode()] = true;
		}

		@Override
		public void keyReleased(KeyEvent e) {
			isKeyPressed[e.getKeyCode()] = false;
		}

		@Override
		public void keyTyped(KeyEvent e) {
		}
	}

	public boolean isKeyPressed(int keycode) {
		return isKeyPressed[keycode];
	}
	
	public int getMouseWheel() {
		return mouseWheel;
	}
	
	public boolean hasMouseMovedSincePressed() {
		return hasMouseMovedSincePressed;
	}

	public boolean isLeftMousePressed() {
		return mousePressed[MouseEvent.BUTTON1];
	}

	public boolean isMiddleMouseClicked() {
		return mousePressed[MouseEvent.BUTTON2];
	}

	public boolean isRightMousePressed() {
		return mousePressed[MouseEvent.BUTTON3];
	}

}
