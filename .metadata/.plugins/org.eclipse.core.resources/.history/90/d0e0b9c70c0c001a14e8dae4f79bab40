package me.brook.PokemonCreator.world.tile;

import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

import me.brook.PokemonCreator.world.yaml.Configuration;

public enum TileType {

	ERROR, GRASS, TALL_GRASS, RED_FLOWER, ORANGE_FLOWER, BLUE_FLOWER, YELLOW_FLOWER, SMALL_BUSH, LONG_BUSH, GRASS_PATH;

	private static int idCount = 0;

	private int id;
	private BufferedImage[] images;

	private boolean isCollidable, isAnimated;

	public static void loadTileData() throws IOException {
		Configuration config = new Configuration(
				new File("C:\\Users\\Stone\\PokemonWild\\Pokemon Wild\\res\\tiles\\yml\\basic.yml"));

		// Load 1x1
		BufferedImage sheet = ImageIO.read(new File(
				"C:\\Users\\Stone\\PokemonWild\\Pokemon Wild\\res\\tiles\\" + config.get("textures.basic.info.file")));

		for(Object obj : config.getKeys("textures.basic")) {
			String str = obj.toString();

			if(!str.equals("info")) {
				TileType.valueOf(str.toUpperCase()).loadTile(config, sheet);
			}
		}

	}

	private void loadTile(Configuration config, BufferedImage sheet) {
		// We load the tile data now from the basic.yml
		String name = this.toString().toLowerCase();
		int size = config.getInt("textures.basic.info.size");
		config.setSection("textures.basic." + name);

		isCollidable = config.getBoolean("collidable");
		isAnimated = config.getBoolean("animated");

		id = idCount++;
		int variants = config.getInt("variants");
		images = new BufferedImage[variants];

		// Load the variants using these coordinates
		Point start = config.getPoint("location.start");
		Point end = config.getPoint("location.end");

		if(end == null) {
			for(int i = 0; i < variants; i++) { // Additional pieces are in the x-axis
				int tx = (i + start.x) * size;
				int ty = (start.y) * size;

				try {
					images[i] = sheet.getSubimage(tx, ty, size, size);
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}
		}
		else {
			variants = (end.x - start.x) * (end.y - start.y);
			images = new BufferedImage[variants];
			int i = 0;
			for(int x = start.x; x < end.x; x++) {
				for(int y = start.x; y < end.x; y++) {
					int tx = x * size;
					int ty = y * size;

					System.out.println(x + " " + y);
					System.out.println(tx + " " + ty);
					try {
						images[i++] = sheet.getSubimage(tx, ty, size, size);
					}
					catch(Exception e) {
						e.printStackTrace();
					}
				}
			}
		}
		config.setSection("");
	}

	public int getID() {
		return id;
	}

	public boolean isCollidable() {
		return isCollidable;
	}

	public boolean isAnimated() {
		return isAnimated;
	}

	public BufferedImage[] getImages() {
		return images;
	}

}
