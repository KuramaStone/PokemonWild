package me.brook.PokemonCreator.input.tool;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

import me.brook.PokemonCreator.PokemonCreator;
import me.brook.PokemonCreator.input.InputHandler;
import me.brook.PokemonCreator.world.tile.Tile;

public abstract class SelectAreaPaintTool extends PaintTool {

	protected Point mouseStart, mouseEnd;
	protected int clickType;

	public SelectAreaPaintTool(PokemonCreator creator) {
		super(creator);
	}

	@Override
	public void draw(Graphics g) {
		g.setColor(Color.RED);
		if(mouseStart != null && mouseEnd != null) {
			Point start = constructTopLeft(), end = constructBottomRight();

			int x1 = (start.x + drawer.getxOffset()) * drawer.getTileSize();
			int y1 = (start.y + drawer.getyOffset()) * drawer.getTileSize();

			int x2 = (end.x + drawer.getxOffset()) * drawer.getTileSize();
			int y2 = (end.y + drawer.getyOffset()) * drawer.getTileSize();

			g.setColor(Color.RED);
			g.drawRect(x1, y1, x2 - x1, y2 - y1);
		}
	}

	@Override
	public void handleInput(InputHandler input) {

		if(maker.getCurrentArea() == null) {
			return;
		}

		if(input.getMousePressed()[clickType]) {
			mouseEnd = drawer.getTileLocationAt(mouse);
		}
		else if(mouseStart != null && mouseEnd != null) {
			Point start = constructTopLeft(), end = constructBottomRight();

			List<Point> points = new ArrayList<>();
			for(int x = start.x; x < end.x; x++) {
				for(int y = start.y; y < end.y; y++) {
					points.add(new Point(x, y));
				}
			}

			if(clickType == 1) {
				fillTiles(points);
			}
			else if(clickType == 2) {
				removeSurfaceTiles(points);
			}
			else if(clickType == 3) {
				removeTiles(points);
			}

			mouseStart = null;
			mouseEnd = null;
		}

	}

	public List<Tile> getAllTilesWithinSelection() {
		List<Tile> tiles = new ArrayList<>();

		for(int x = mouseStart.x; x < mouseEnd.x; x++) {
			for(int y = mouseStart.y; y < mouseEnd.y; y++) {
				tiles.addAll(world.getTilesAt(x, y));
			}
		}

		return tiles;
	}

	private int getMousePressed(InputHandler input) {

		for(int i = 0; i < input.getMousePressed().length; i++) {
			if(input.getMousePressed()[i]) {
				return i;
			}
		}
		return -1;
	}

	protected Point constructBottomRight() {
		Point end = new Point();

		if(mouseStart.x < mouseEnd.x) {
			end.x = mouseEnd.x;
		}
		else {
			end.x = mouseStart.x;
		}

		if(mouseStart.y < mouseEnd.y) {
			end.y = mouseEnd.y;
		}
		else {
			end.y = mouseStart.y;
		}

		// Buffer to render full tile
		end.x++;
		end.y++;
		
		return end;
	}

	protected Point constructTopLeft() {
		Point start = new Point();
		if(mouseStart.x < mouseEnd.x) {
			start.x = mouseStart.x;
		}
		else {
			start.x = mouseEnd.x;
		}

		if(mouseStart.y < mouseEnd.y) {
			start.y = mouseStart.y;
		}
		else {
			start.y = mouseEnd.y;
		}
		return start;
	}

}
