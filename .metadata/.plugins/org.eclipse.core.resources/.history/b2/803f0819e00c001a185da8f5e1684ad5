package me.brook.PokemonCreator.input.tool;

import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

import me.brook.PokemonCreator.PokemonCreator;
import me.brook.PokemonCreator.input.InputHandler;
import me.brook.PokemonCreator.input.PokeMaker;
import me.brook.PokemonCreator.world.area.PokeArea;
import me.brook.PokemonCreator.world.tile.Tile;

public class PencilTool extends PaintTool {

	private List<Point> tilesAdded;
	
	public PencilTool() {
		tilesAdded = new ArrayList<>();
	}

	@Override
	public void handleInput(PokemonCreator creator, InputHandler input) {
		Point mouse = drawer.getMousePosition();
		if(mouse == null) {
			return;
		
		Point tile = drawer.getTileLocationAt(mouse);

		// Add tiles during left click
		if(input.isLeftMousePressed()) {

			if(!tilesAdded.contains(tile)) {
				if(world.getAreas().size() > currentArea) {
					PokeArea area = world.getAreas().get(currentArea);
					area.add(new Tile(tile.x, tile.y, currentTileData));
					// To prevent accidentally adding another tile to the same location during a
					// click and drag,
					// we create a list of tile points that have been made since then.
					tilesAdded.add(tile);
				}
			}
		}
		else {
			tilesAdded.clear();

			if(input.isRightMousePressed()) {
				if(!hasRemovalBeenPerformed) {
					if(world.getAreas().size() > currentArea) {
						PokeArea area = world.getAreas().get(currentArea);
						List<Tile> tiles = area.getTiles();
						// Remove highest tile
						for(int i = tiles.size() - 1; i >= 0; i--) {
							Tile t = tiles.get(i);
							if(t.isLocationAt(tile)) {
								undoneTiles.add(area.remove(i));
								break;
							}
						}
						hasRemovalBeenPerformed = true;
					}
				}

			}
			else {
				hasRemovalBeenPerformed = false;

				if(input.isMiddleMouseClicked()) {
					if(world.getAreas().size() > currentArea) {
						PokeArea area = world.getAreas().get(currentArea);
						List<Tile> tiles = area.getTiles();
						for(int i = tiles.size() - 1; i >= 0; i--) {
							Tile t = tiles.get(i);
							if(t.isLocationAt(tile)) {
								// This is so that the player may get the tile data one tile beneath the top
								if(currentTileData.equals(t.getData())) {
									continue;
								}
								else {
									currentTileData = t.getData();
									tileScroller.unSelectOtherTiles(currentTileData);
									break;
								}
							}
						}
					}
				}
			}
		}
	}
	}

}
