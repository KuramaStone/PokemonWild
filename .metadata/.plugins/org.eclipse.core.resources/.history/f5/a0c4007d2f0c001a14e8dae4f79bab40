package me.brook.PokemonCreator.graphics.style;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;

import javax.swing.AbstractButton;
import javax.swing.JComponent;
import javax.swing.UIManager;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicButtonUI;
import javax.swing.plaf.basic.BasicGraphicsUtils;

import me.Stone.Clicker.tools.Colors;

public class ButtonDesign extends BasicButtonUI {

	private BufferedImage icon;
	
	public ButtonDesign(BufferedImage icon) {
		this.icon = icon;
	}

	@Override
	public void installUI(JComponent c) {
		super.installUI(c);
		AbstractButton ab = (AbstractButton) c;
		ab.setOpaque(false);
		ab.setBorder(new EmptyBorder(5, 15, 5, 15));
	}

	static Rectangle viewR = new Rectangle(), iconR = new Rectangle(), textR = new Rectangle();
	static Insets cachedInsets;

	@Override
	public void paint(Graphics g, JComponent c) {
		AbstractButton b = (AbstractButton) c;
		paintBackground(g, b, b.getModel().isPressed() ? 2 : 0);

		super.paint(g, c);
	}

	@Override
	protected void paintText(Graphics g, JComponent c, Rectangle rect, String text) {
		AbstractButton b = (AbstractButton) c;
		Font f = b.getFont();
		g.setFont(f);
		FontMetrics fm = g.getFontMetrics(f);

		if(!b.getModel().isPressed())
			rect.y -= 2;

		if(b.isEnabled()) {
			g.setColor(b.getForeground());
			BasicGraphicsUtils.drawString(g, text, 0, rect.x, rect.y + fm.getAscent());
			// BasicGraphicsUtils.drawString(b, (Graphics2D) g, text, rect.x, rect.y +
			// fm.getAscent());
		}
		else {
			String prefix = getPropertyPrefix();
			g.setColor(UIManager.getColor(prefix + "disabledText"));
			BasicGraphicsUtils.drawString(g, text, 0, rect.x, rect.y + fm.getAscent());
		}
	}

	private void paintBackground(Graphics g, AbstractButton ab, int yOffset) {
		Dimension size = ab.getSize();
		Graphics2D g2 = (Graphics2D) g;
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g.setColor(Colors.CUSTOM_BUTTON.darker());
		g.fillRoundRect(0, yOffset, size.width, size.height - yOffset, 25, 25);
		g.setColor(Colors.CUSTOM_BUTTON);
		g.fillRoundRect(0, yOffset, size.width, size.height + yOffset - 5, 25, 25);
	}

	public static class ToggleButtonDesign extends BasicButtonUI {

		@Override
		public void installUI(JComponent c) {
			super.installUI(c);
			AbstractButton ab = (AbstractButton) c;
			ab.setOpaque(false);
			ab.setBorder(new EmptyBorder(5, 15, 5, 15));
		}

		@Override
		public void paint(Graphics g, JComponent c) {
			AbstractButton ab = (AbstractButton) c;
			paintBackground(g, ab, ab.getModel().isSelected() ? 2 : 0);
			super.paint(g, c);
		}

		@Override
		protected void paintText(Graphics g, JComponent c, Rectangle rect, String text) {
			AbstractButton b = (AbstractButton) c;
			Font f = b.getFont();
			g.setFont(f);
			FontMetrics fm = g.getFontMetrics(f);

			if(!b.isSelected())
				rect.y -= 2;

			if(b.isEnabled()) {
				g.setColor(b.getForeground());
				BasicGraphicsUtils.drawString(g, text, 0, rect.x, rect.y + fm.getAscent());
			}
			else {
				String prefix = getPropertyPrefix();
				g.setColor(UIManager.getColor(prefix + "disabledText"));
				BasicGraphicsUtils.drawString(g, text, 0, rect.x, rect.y + fm.getAscent());
			}
		}

		private void paintBackground(Graphics g, AbstractButton ab, int yOffset) {
			Dimension size = ab.getSize();
			Graphics2D g2 = (Graphics2D) g;
			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

			if(ab.isSelected()) {
				g.setColor(Colors.CUSTOM_BUTTON.darker());
				g.fillRoundRect(0, yOffset, size.width, size.height - yOffset, 25, 25);
				g.setColor(Colors.CUSTOM_BUTTON);
				g.fillRoundRect(0, yOffset, size.width, size.height + yOffset - 5, 25, 25);
			}
			else {
				g.setColor(Colors.CUSTOM_BUTTON.darker());
				g.fillRoundRect(0, yOffset, size.width, size.height - yOffset, 25, 25);
				g.setColor(Colors.CUSTOM_BUTTON);
				g.fillRoundRect(0, yOffset, size.width, size.height + yOffset - 5, 25, 25);
			}
		}

	}

}
