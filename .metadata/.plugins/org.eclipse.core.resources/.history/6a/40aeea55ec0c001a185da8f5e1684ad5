package me.brook.PokemonCreator.input.tool;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

import me.brook.PokemonCreator.PokemonCreator;
import me.brook.PokemonCreator.input.InputHandler;
import me.brook.PokemonCreator.world.area.PokeArea;
import me.brook.PokemonCreator.world.tile.Tile;

public class FillAreaTool extends PaintTool {

	private Point pressStart, pressEnd;
	private int clickType;

	public FillAreaTool(PokemonCreator creator) {
		super(creator);
	}

	@Override
	public void draw(Graphics g) {
		g.setColor(Color.RED);
		if(pressStart != null && pressEnd != null) {
			Point start = new Point(), end = new Point();

			if(pressStart.x < pressEnd.x) {
				start.x = pressStart.x;
			}
			else {
				start.x = pressEnd.x;
			}

			if(pressStart.y > pressEnd.y) {
				end.y = pressStart.y;
			}
			else {
				end.y = pressEnd.y;
			}
			
			g.drawRect(start.x, start.y, end.x - start.x, end.y - start.y);
		}
	}

	@Override
	public void handleInput(InputHandler input) {

		Point mouse = drawer.getMousePosition();

		if(mouse == null) {
			return;
		}
		pressEnd = mouse;

		if(input.isLeftMousePressed() && pressStart == null) {
			pressStart = mouse;
			clickType = 1;
		}

		// if(input.isLeftMouseClicked()) {
		// // Get top left and bottom right corners
		// Point start = new Point(), end = new Point();
		//
		// if(pressStart.x < pressEnd.x) {
		// start.x = pressStart.x;
		// }
		// else {
		// start.x = pressEnd.x;
		// }
		//
		// if(pressStart.y < pressEnd.y) {
		// end.y = pressStart.y;
		// }
		// else {
		// end.y = pressEnd.y;
		// }
		//
		// // Get all tiles the two points
		// List<Tile> points = new ArrayList<>();
		//
		// int step = drawer.getTileSize();
		// for(int x = start.x; x < end.x; x += step) {
		// for(int y = start.y; y < end.y; y += step) {
		// Point point = new Point(x, y);
		//
		// points.addAll(getTilesAt(drawer.getTileLocationAt(point)));
		// }
		// }
		//
		// pressStart = null;
		// }

	}

	private List<Tile> getTilesAt(Point tileLocation) {
		List<Tile> tiles = new ArrayList<>();

		for(PokeArea area : world.getAreas()) {

			tiles.addAll(area.getTilseAt(tileLocation));

		}

		return tiles;
	}

}
