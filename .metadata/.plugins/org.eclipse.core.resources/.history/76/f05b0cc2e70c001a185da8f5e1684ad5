package me.brook.PokemonCreator.world.area;

import java.awt.Color;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.List;

import me.brook.PokemonCreator.toolbox.Tools;
import me.brook.PokemonCreator.world.tile.Tile;

/*
 * This is a single area alone. For multiple routes joining, look at PokeWorld
 */
public class PokeArea {

	private String areaName;
	private List<Tile> tiles;

	/*
	 * This is a randomly generated color to get a unique identification for showing
	 * the surface area of an area. It is created by taking the area name and
	 * turning it into a unique int, and using that as a seed for the random.
	 */
	private Color color, transparentColor;

	/*
	 * The corners of all tiles on the extremities to get a box that contains all
	 * tiles.
	 */
	private Rectangle surface;

	public PokeArea(String name, List<Tile> tiles) {
		this.areaName = name;
		this.tiles = tiles;

		long seed = 0;
		for(char c : name.toCharArray()) {
			seed += c * 852377;
		}
		color = Tools.getUniqueColor(seed);
		transparentColor = new Color(color.getRed(), color.getGreen(), color.getBlue(), 50);
		
		recalculateSurface();
	}

	public void recalculateSurface() {
		Rectangle area = new Rectangle(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);

		// Get the four corners and put them on the Rectangle
		for(Tile t : tiles) {
			if(t.getX() < area.x) {
				area.x = t.getX();
			}
			if(t.getX() > area.width) {
				area.width = t.getX() + 1;
			}

			if(t.getY() < area.y) {
				area.y = t.getY();
			}
			if(t.getY() > area.height) {
				area.height = t.getY() + 1;
			}
		}
		
		this.surface = area;
	}

	public String getAreaName() {
		return areaName;
	}

	public Rectangle getAreaSurface() {
		return surface;
	}

	public void add(Tile tile) {
		tiles.add(tile);
		recalculateSurface();
	}

	public void remove(Tile tile) {
		tiles.remove(tile);
		recalculateSurface();
	}

	public Tile remove(int index) {
		Tile t = tiles.remove(index);
		recalculateSurface();

		return t;
	}

	public Tile getTileAt(Point p) {
		for(Tile tile : tiles) {
			if(tile.isLocationAt(p)) {
				return tile;
			}
		}

		return null;
	}

	public Color getColor() {
		return color;
	}
	
	public Color getTransparentColor() {
		return transparentColor;
	}
	
	public List<Tile> getTiles() {
		return tiles;
	}

}
